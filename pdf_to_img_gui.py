import os
from pdf2image import convert_from_path
import PySimpleGUI as sg

#icon_folder = b'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'
#icon_addfile = b'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'
bg_color = '#BAD0E8'
text_color = '#000000'

# All the stuff inside your window.
layout = [  [sg.Text('Input file', background_color=bg_color, text_color=text_color), sg.InputText(key='-INPUT-FOLDER-'), sg.FileBrowse(), sg.Push(background_color=bg_color),
             sg.Listbox(values=['PNG', 'JPG'], default_values='PNG' , size=(6, 2), key='-FILETYPE-', tooltip='Output file format', no_scrollbar=True),
             #sg.Button('select_file', image_filename=r"C:\Users\shlomof\Documents\code\pdf2image_gui\icons\add-file-8.png", image_size=(24, 24), key='-SELECT_FILE-'), 
             ],
            [sg.Text('Output folder path', background_color=bg_color, text_color=text_color), sg.InputText(key='-OUTPUT-FOLDER-'), sg.FolderBrowse(), sg.Push(background_color=bg_color),
             sg.Listbox(values=['Low', 'High'], default_values='Low' , size=(6, 2), key='-QUALITY-', tooltip='Quality setting', no_scrollbar=True)],
            [sg.ProgressBar(max_value=(10), size=(52, 10), key='-PROGRESS_BAR-')],
            [sg.Button('Convert', bind_return_key=True), sg.Button('Clear'), sg.Push(background_color=bg_color), sg.Button('Quit')]]
count = 0
# Create the Window
window = sg.Window(title='PDF to IMG', 
                   layout=layout,
                   background_color=bg_color,
                   button_color='#83A9D1',
                   keep_on_top=True)    


#run script
def convert_on_press (window, event, values, user_dpi='', quality='',
                      file_extension='', file_type='', progress=''):
    
    print(values['-INPUT-FOLDER-'])
    if str(values['-INPUT-FOLDER-']) == '':
        sg.popup('Please input a file or folder!', any_key_closes=True, keep_on_top=True)
        print("no inputfile")
        pass
    elif str(values['-OUTPUT-FOLDER-']) == '':
        sg.popup('Please select an output folder!', any_key_closes=True, keep_on_top=True)
        print("no output path")
        pass
    else:
        print("working")
        
        try:
            user_input_folder = str(values['-INPUT-FOLDER-'].replace("\\", "/").strip('""'))
            user_output_folder = str(values['-OUTPUT-FOLDER-'].replace("\\", "/").strip('""'))
            print(user_input_folder, user_output_folder)
            filelist = []
            try: 
                for user_input_file in os.listdir(user_input_folder):
                    if '.' not in user_input_file:
                        f = user_input_folder + '/' + user_input_file
                        filelist.append(f)
                    else:
                        f = user_input_folder + '/' + user_input_file
                        sg.popup(f"{f} is not a supported filetype.", keep_on_top=True)
                        pass
            except:
                filelist.append(user_input_folder)

            try:
                for x in range(len(filelist)):
                    
                    y = len(filelist)

                    print("did you get here1")
                    filename = filelist[x].rsplit('/')
                    filename = filename[-1].rsplit('.')
                    filename = filename[0]#.replace(".", "_").strip(']').strip("'")
                    if values['-QUALITY-'] == ['Low']:
                        user_dpi = 200
                        quality = ''
                    if values['-QUALITY-'] == ['High']:
                        user_dpi = 600
                        quality = 'hq_'
                    images = convert_from_path(filelist[x], dpi=user_dpi, poppler_path=r"C:\Program Files\poppler-23.11.0\Library\bin")
                    y = 10 / (len(images)); z = 0
                    
                    for i in range(len(images)):
                        z += y
                        print(z)
                        window['-PROGRESS_BAR-'].update(z)

                        # Save pages as images in the pdf
                        print("did you get here2")
                        print(values['-FILETYPE-'])
                        
                        if values['-FILETYPE-'] == ['JPG']:
                            file_extension = '.jpg'
                            file_type = 'JPEG'

                        if values['-FILETYPE-'] == ['PNG']:
                            file_extension = '.png'
                            file_type = 'PNG'
                        else:
                            quality = ''
                            file_extension = '.jpeg'
                            file_type = 'JPEG'

                        images[i].save(user_output_folder + '\\' + str(filename) + '_' + quality + str(i) + file_extension, file_type)
                        pass

                    sg.popup(f"{filename} is done!", keep_on_top=True)

            except:
                err = ''
                sg.popup(f"Error! Check your files. \n{err}", keep_on_top=True)
                pass                 
                    

        except WindowsError as err:
            sg.popup(f"Error! {err}", keep_on_top=True)
            pass


progress = 0
           

while True:
    event, values = window.read()    
    if event == sg.WIN_CLOSED or event == 'Quit': # if user closes window or clicks cancel
        break
    if event == 'Convert':
        convert_on_press(window, event, values)
        window['-PROGRESS_BAR-'].update(0)
    if event == 'Clear':
        window['-INPUT-FOLDER-'].update('')
        window['-OUTPUT-FOLDER-'].update('')